{"version":3,"sources":["services/contacts.js","components/NewContact.js","components/Contact.js","components/FilterContact.js","components/SearchContacts.js","components/Notification.js","App.js","index.js"],"names":["baseURL","requestData","request","then","response","data","axios","get","newObject","post","id","put","delete","NewContact","persons","setPersons","newName","setNewName","newNumber","setNewNumber","notification","setNotification","checkContact","value","findIndex","x","name","toLowerCase","newContact","contactObj","contactService","message","isError","setTimeout","concat","catch","updateContact","map","contact","filter","p","onSubmit","event","preventDefault","number","length","window","alert","confirm","find","match","onChange","console","log","target","type","Contact","toggleDelete","className","onClick","FilterContact","newFilter","contactsToShow","person","theFilter","theSearch","includes","key","SearchContacts","setNewFilter","placeholder","Notification","App","useState","useEffect","initContact","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdbdf000.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseURL = \"/api/persons\"\n\nconst requestData = (request) => {\n    return request.then(response => response.data)\n}\n\nconst getAll = () => {\n    const request = axios.get(baseURL)\n    return requestData(request)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseURL, newObject)\n    return requestData(request)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseURL}/${id}`, newObject)\n    return requestData(request)\n}\n\nconst deleteContact = id => {\n    const request = axios.delete(`${baseURL}/${id}`)\n    return requestData(request)\n}\n\nexport default { getAll, create, update, deleteContact }","import React from 'react'\nimport contactService from './../services/contacts'\n\n/* Render a new contact\n  Checks if a value is provided, it already exists \n  and if the number is numeral*/\nconst NewContact = ( { persons, setPersons\n                    ,newName, setNewName\n                    ,newNumber, setNewNumber\n                    ,notification, setNotification } ) => {\n    const addContact = (event) => {\n        event.preventDefault()\n        const contactObj = {\n          name: newName,\n          number: newNumber\n        }\n        if (newName.length < 1 || newNumber.length < 1) {\n          window.alert(`Name or number is missing`)\n        } else if (checkContact(newName) \n                    && window.confirm(\n                    `${newName} already exists. Want to update the number?`)) {\n          const id = persons.find(p => p.name === newName).id            \n          updateContact(id, contactObj)\n        } else if (!newNumber.match(/[0-9/+/-]/ig)) {\n          window.alert(`Please provide a number`)\n        } else {\n          newContact(contactObj)\n        }\n      }\n    \n      /* Check if the contact exists */\n      const checkContact = ( value ) => {\n        const ind = persons.findIndex(x => \n          x.name.toLowerCase() === value.toLowerCase())\n        if (ind >= 0) {\n          return true\n        } return false\n      } \n      \n      /* Add new contact to server */\n      const newContact = (contactObj) => {\n        contactService\n            .create(contactObj)\n            .then(data => {\n              setNotification(\n                { message: `${contactObj.name} added`, isError: false}\n              )\n              setTimeout(() => {\n                setNotification({ ...notification, message: null })\n              }, 3000)\n              setPersons(persons.concat(data))\n              setNewName('')\n              setNewNumber('')\n            })\n            .catch(() => {\n              setNotification(\n                { message: `${contactObj.name} already deleted`, isError: true }\n              )\n              setTimeout(() => {\n                setNotification({ message: null, isError: false })\n              }, 3000)\n            })\n      }\n\n      /* Update contact */\n      const updateContact = (id, contactObj) => {\n        contactService\n        .update(id, contactObj)\n        .then(newContact => {\n          setNotification(\n            { message: `${contactObj.name} updated`, isError: false }\n          )\n          setTimeout(() => {\n            setNotification({ ...notification, message: null})\n          }, 3000)\n          setPersons(persons.map(contact => \n            contact.id !== id \n            ? contact \n            : newContact))\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(() => {\n          setNotification(\n            { message: `${contactObj.name} already deleted`, isError: true }\n            )\n            setTimeout(() => {\n              setNotification({ message: null, isError: false })\n            }, 3000)\n            setPersons(persons.filter(p => p.id !== id))\n        })\n      }\n\n      const handleContactChange = (event) => {\n        console.log(event.target.value)\n        setNewName(event.target.value)\n      }\n      const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n      }\n    \n    return (\n    <form onSubmit={ addContact }>\n        <div>\n          Name: \n            <input \n              value={ newName }\n              onChange={ handleContactChange } />\n        </div>\n        <div>\n          Number: \n            <input \n              value={ newNumber }\n              onChange={ handleNumberChange } />\n        </div>\n        <div>\n          <button type=\"submit\">Add</button>\n        </div>\n      </form>\n    )}\n\nexport default NewContact","import React from 'react'\n\n/* Render the list of contact */\nconst Contact = ({ id, name, number, toggleDelete }) => \n    <div className='contact'>\n        { id }: { name } \n        { ' ' }\n        <b>{ number }</b>\n        { ' ' }\n        <button onClick={ toggleDelete }>\n            Delete\n        </button>\n    </div>\n\nexport default Contact","import React from 'react'\nimport Contact from './Contact'\n\n/* Render the added contacts to screen */\nconst FilterContact = ( { persons, newFilter, toggleDelete } ) => {\n\n    const contactsToShow = () =>  \n      persons.filter(person => {\n        let theFilter = person.name.toLowerCase()\n        let theSearch = newFilter.toLowerCase()\n        return theFilter.includes(theSearch)\n      })\n  \n    const rows = () => {\n      if(contactsToShow().length < 1) {\n        return <div>No contacts matching the criteria</div>\n      }\n      return contactsToShow().map(contact =>\n        <Contact \n          key={ contact.id }\n          id={ contact.id }\n          name={ contact.name }\n          number={ contact.number }\n          toggleDelete={ () => toggleDelete(contact.id) } />\n      )\n    }\n\n    return (\n        <ul> { rows() } </ul>\n    )\n}\n\nexport default FilterContact","import React from 'react';\n\n/* Render the search function */\nconst SearchContacts = ( { newFilter, setNewFilter } ) => {\n    \n    const handleFilter = (event) => {\n        console.log(event.target.value)\n        setNewFilter(event.target.value)\n      }\n    \n    return (\n        <>\n        Search:\n        <input placeholder='Type to search...'\n          value={ newFilter }\n          onChange={ handleFilter } />\n          </>\n    )\n}\n\nexport default SearchContacts","import React from 'react'\n\n/* Handle and render different types of notifications */\nconst Notification = ({ message }) => {\n    if (message.message === null) {\n        return null\n    }\n    if (message.isError === true) {\n    return (\n            <div className='error'>\n                { message.message }\n            </div>\n    )} else {\n        return (\n            <div className='notification'>\n                { message.message }\n            </div>\n        )\n    }\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react';\nimport NewContact from './components/NewContact'\nimport FilterContact from './components/FilterContact'\nimport SearchContacts from './components/SearchContacts'\nimport contactService from './services/contacts'\nimport Notification from './components/Notification'\n\n/* Phonebook application that let's the user \n  save and view added contacts */\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  \n  /* Notification has a message (string or null) and \n  and boolean value of isError */\n  const [notification, setNotification] = useState({\n    message: null,\n    isError: false\n  })\n  \n  /* Fetch data from server */\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(initContact => {\n        setPersons(initContact)\n      })\n  }, [])\n\n  /* Delete contact */\n  const deleteHandler = (id) => {\n    const contact = persons.find(c => c.id === id)\n    if (window.confirm(`Delete ${contact.name}?`)) {\n      contactService\n      .deleteContact(id)\n      .then(() => {\n        setNotification({ message: `${contact.name} deleted`, isError: false})\n        setTimeout(() => {\n          setNotification({ ...notification, message: null})\n        }, 3000)\n        setPersons(persons.filter(p => p.id !== id))\n      })\n      .catch(() => {\n        setNotification(\n          { message: `${contact.name} already deleted`, isError: true}\n        )\n        setTimeout(() => {\n          setNotification(\n            { message: null, isError: false}\n          )\n        }, 3000)\n        setPersons(persons.filter(p => p.id !== id))\n      })\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <SearchContacts \n        newFilter={ newFilter }\n        setNewFilter={ setNewFilter } />\n      <h2>Add new contact</h2>\n      <div className='overlay'><Notification message={ notification } /></div>\n      <NewContact \n        persons={ persons }\n        setPersons={ setPersons }\n        newName={ newName }\n        setNewName={ setNewName }\n        newNumber={ newNumber }\n        setNewNumber={ setNewNumber }\n        notification={ notification } \n        setNotification={ setNotification }/>\n      <h2>Numbers</h2>\n      <FilterContact \n        persons={ persons }\n        newFilter={newFilter}\n        toggleDelete={ deleteHandler }/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n/*const contacts = [\n    {\n        id: 1,\n        name: 'Santeri Kinnunen',\n        number: 123123\n    },\n    {\n        id: 2,\n        name: 'Timo Jutila', \n        number: 555555\n    },\n    {\n        id: 3,\n        name: 'Sami Kapanen',\n        number: 242424\n    }\n]\n*/\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n"],"sourceRoot":""}