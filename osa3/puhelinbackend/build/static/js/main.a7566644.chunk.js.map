{"version":3,"sources":["services/contacts.js","components/NewContact.js","components/Contact.js","components/FilterContact.js","components/SearchContacts.js","components/Notification.js","App.js","index.js"],"names":["baseURL","requestData","request","then","response","data","axios","get","newObject","post","id","put","delete","NewContact","persons","setPersons","newName","setNewName","newNumber","setNewNumber","notification","setNotification","checkContact","value","findIndex","x","name","toLowerCase","newContact","contactObj","contactService","message","isError","setTimeout","concat","catch","error","console","log","updateContact","map","contact","filter","p","onSubmit","event","preventDefault","number","length","window","alert","confirm","find","match","onChange","target","type","Contact","toggleDelete","className","onClick","FilterContact","newFilter","contactsToShow","person","theFilter","theSearch","includes","key","SearchContacts","setNewFilter","placeholder","Notification","App","useState","useEffect","initContact","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7566644.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseURL = \"/api/persons\"\n\nconst requestData = (request) => {\n    return request.then(response => response.data)\n}\n\nconst getAll = () => {\n    const request = axios.get(baseURL)\n    return requestData(request)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseURL, newObject)\n    return requestData(request)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseURL}/${id}`, newObject)\n    return requestData(request)\n}\n\nconst deleteContact = id => {\n    const request = axios.delete(`${baseURL}/${id}`)\n    return requestData(request)\n}\n\nexport default { getAll, create, update, deleteContact }","import React from 'react'\nimport contactService from './../services/contacts'\n\n/* Render a new contact\n  Checks if a value is provided, it already exists \n  and if the number is numeral*/\nconst NewContact = ( { persons, setPersons\n                    ,newName, setNewName\n                    ,newNumber, setNewNumber\n                    ,notification, setNotification } ) => {\n    const addContact = (event) => {\n        event.preventDefault()\n        const contactObj = {\n            name: newName,\n            number: newNumber\n        }\n        if (newName.length < 1 || newNumber.length < 1) {\n            window.alert(`Name or number is missing`)\n        } else if (checkContact(newName) \n                    && window.confirm(\n                    `${newName} already exists. Want to update the number?`)) {\n            const id = persons.find(p => p.name === newName).id            \n            updateContact(id, contactObj)\n        } else if (!newNumber.match(/[0-9/+/-]/ig)) {\n            window.alert(`Please provide a number`)\n        } else {\n            newContact(contactObj)\n        }\n    }\n    \n      /* Check if the contact exists */\n    const checkContact = ( value ) => {\n        const ind = persons.findIndex(x => \n            x.name.toLowerCase() === value.toLowerCase())\n        if (ind >= 0) {\n            return true\n        } return false\n    }\n\n    /* Add new contact to server */\n    const newContact = (contactObj) => {\n        contactService\n            .create(contactObj)\n            .then(data => {\n                setNotification(\n                    { message: `${contactObj.name} added`, isError: false}\n                )\n                setTimeout(() => {\n                    setNotification({ ...notification, message: null })\n                }, 3000)\n                setPersons(persons.concat(data))\n                setNewName('')\n                setNewNumber('')\n            })\n            .catch((error) => {\n                console.log(error.response)\n                setNotification(\n                    { message: error.response.data.error, isError: true }\n                )\n                setTimeout(() => {\n                    setNotification({ message: null, isError: false })\n                }, 3000)\n            })\n    }\n\n    /* Update contact */\n    const updateContact = (id, contactObj) => {\n        contactService\n        .update(id, contactObj)\n        .then(newContact => {\n            setNotification(\n                { message: `${contactObj.name} updated`, isError: false }\n            )\n            setTimeout(() => {\n                setNotification({ ...notification, message: null})\n            }, 3000)\n            setPersons(persons.map(contact => \n                contact.id !== id \n                ? contact \n                : newContact))\n            setNewName('')\n            setNewNumber('')\n            })\n        .catch(() => {\n            setNotification(\n                { message: `${contactObj.name} already deleted`, isError: true }\n            )\n            setTimeout(() => {\n                setNotification({ message: null, isError: false })\n            }, 3000)\n            setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n\n    const handleContactChange = (event) => {\n        console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    return (\n    <form onSubmit={ addContact }>\n        <div>\n        Name: \n            <input \n                value={ newName }\n                onChange={ handleContactChange } />\n        </div>\n        <div>\n        Number: \n            <input \n                value={ newNumber }\n                onChange={ handleNumberChange } />\n        </div>\n        <div>\n            <button type=\"submit\">Add</button>\n        </div>\n    </form>\n    )\n}\n\nexport default NewContact","import React from 'react'\n\n/* Render the list of contact */\nconst Contact = ({ id, name, number, toggleDelete }) => \n    <div className='contact'>\n        { name } \n        { ' ' }\n        <b>{ number }</b>\n        { ' ' }\n        <button onClick={ toggleDelete }>\n            Delete\n        </button>\n    </div>\n\nexport default Contact","import React from 'react'\nimport Contact from './Contact'\n\n/* Render the added contacts to screen */\nconst FilterContact = ( { persons, newFilter, toggleDelete } ) => {\n\n    const contactsToShow = () =>  \n      persons.filter(person => {\n        let theFilter = person.name.toLowerCase()\n        let theSearch = newFilter.toLowerCase()\n        return theFilter.includes(theSearch)\n      })\n  \n    const rows = () => {\n      if(contactsToShow().length < 1) {\n        return <div>No contacts matching the criteria</div>\n      }\n      return contactsToShow().map(contact =>\n        <Contact \n          key={ contact.id }\n          id={ contact.id }\n          name={ contact.name }\n          number={ contact.number }\n          toggleDelete={ () => toggleDelete(contact.id) } />\n      )\n    }\n\n    return (\n        <ul> { rows() } </ul>\n    )\n}\n\nexport default FilterContact","import React from 'react';\n\n/* Render the search function */\nconst SearchContacts = ( { newFilter, setNewFilter } ) => {\n    \n    const handleFilter = (event) => {\n        console.log(event.target.value)\n        setNewFilter(event.target.value)\n      }\n    \n    return (\n        <>\n        Search:\n        <input placeholder='Type to search...'\n          value={ newFilter }\n          onChange={ handleFilter } />\n          </>\n    )\n}\n\nexport default SearchContacts","import React from 'react'\n\n/* Handle and render different types of notifications */\nconst Notification = ({ message }) => {\n    if (message.message === null) {\n        return null\n    }\n    if (message.isError === true) {\n    return (\n            <div className='error'>\n                { message.message }\n            </div>\n    )} else {\n        return (\n            <div className='notification'>\n                { message.message }\n            </div>\n        )\n    }\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react';\nimport NewContact from './components/NewContact'\nimport FilterContact from './components/FilterContact'\nimport SearchContacts from './components/SearchContacts'\nimport contactService from './services/contacts'\nimport Notification from './components/Notification'\n\n/* Phonebook application that let's the user \n  save and view added contacts */\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  \n  /* Notification has a message (string or null) and \n  and boolean value of isError */\n  const [notification, setNotification] = useState({\n    message: null,\n    isError: false\n  })\n  \n  /* Fetch data from server */\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(initContact => {\n        setPersons(initContact)\n      })\n  }, [])\n\n  /* Delete contact */\n  const deleteHandler = (id) => {\n    const contact = persons.find(c => c.id === id)\n    if (window.confirm(`Delete ${contact.name}?`)) {\n      contactService\n      .deleteContact(id)\n      .then(() => {\n        setNotification({ message: `${contact.name} deleted`, isError: false})\n        setTimeout(() => {\n          setNotification({ ...notification, message: null})\n        }, 3000)\n        setPersons(persons.filter(p => p.id !== id))\n      })\n      .catch(() => {\n        setNotification(\n          { message: `${contact.name} already deleted`, isError: true}\n        )\n        setTimeout(() => {\n          setNotification(\n            { message: null, isError: false}\n          )\n        }, 3000)\n        setPersons(persons.filter(p => p.id !== id))\n      })\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <SearchContacts \n        newFilter={ newFilter }\n        setNewFilter={ setNewFilter } />\n      <h2>Add new contact</h2>\n      <div className='overlay'><Notification message={ notification } /></div>\n      <NewContact \n        persons={ persons }\n        setPersons={ setPersons }\n        newName={ newName }\n        setNewName={ setNewName }\n        newNumber={ newNumber }\n        setNewNumber={ setNewNumber }\n        notification={ notification } \n        setNotification={ setNotification }/>\n      <h2>Numbers</h2>\n      <FilterContact \n        persons={ persons }\n        newFilter={newFilter}\n        toggleDelete={ deleteHandler }/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n/*const contacts = [\n    {\n        id: 1,\n        name: 'Santeri Kinnunen',\n        number: 123123\n    },\n    {\n        id: 2,\n        name: 'Timo Jutila', \n        number: 555555\n    },\n    {\n        id: 3,\n        name: 'Sami Kapanen',\n        number: 242424\n    }\n]\n*/\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n"],"sourceRoot":""}